<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
    <parent>
		<groupId>com.fungo.game</groupId>
		<artifactId>fungo-game-cloud</artifactId>
		<version>1.0-SNAPSHOT</version>
    </parent>
	<artifactId>fungo-game-system</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>fungo-game-system</name>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<!--properties节点中设置docker镜像的前缀“springboot”-->
		<java.version>1.8</java.version>
		<docker.image.prefix>ramer</docker.image.prefix>
	</properties>
	<dependencies>
		<!--勿删-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<!--勿删-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- Junit 5 -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-params</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>2.0.2-beta</version>
			<scope>test</scope>
		</dependency>
		<!-- junit 多线程测试 -->


		<!-- junit 5 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>
		</dependency>
		<!-- turbine 监控启动类 -->
<!--		<dependency>-->
<!--			<groupId>org.springframework.cloud</groupId>-->
<!--			<artifactId>spring-cloud-starter-netflix-turbine</artifactId>-->
<!--		</dependency>-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
		</dependency>
		<!--引入 common-->
		<dependency>
			<groupId>com.fungo.game</groupId>
			<artifactId>fungo-game-common</artifactId>
			<version>1.0-SNAPSHOT</version>
		</dependency>
		<!-- 引入redis -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.session</groupId>
			<artifactId>spring-session-data-redis</artifactId>
<!--			<version>1.2.2.RELEASE</version>-->
		</dependency>
        <!-- redis依赖commons-pool 这个依赖一定要添加 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
        </dependency>

<!--		<dependency>-->
<!--			<groupId>com.baomidou</groupId>-->
<!--			<artifactId>mybatisplus-spring-boot-starter</artifactId>-->
<!--			<version>1.0.1</version>-->
<!--		</dependency>-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
		<!-- 以下二个是 config依赖-->
		<!--重新获取和刷新-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>RELEASE</version>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid-spring-boot-starter</artifactId>
			<version>1.1.10</version>
		</dependency>


		<!-- 热部署 -->
<!--		<dependency>-->
<!--			<groupId>org.springframework.boot</groupId>-->
<!--			<artifactId>spring-boot-devtools</artifactId>-->
<!--			&lt;!&ndash; 表示依赖不会传递 &ndash;&gt;-->
<!--			<optional>true</optional>-->
<!--		</dependency>-->

		<!-- grant poi start -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>3.15</version>
		</dependency>

		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>3.15</version>
		</dependency>
		<!-- grant poi end-->

		<!-- 依赖lang3-->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<!-- 依赖lang3-->

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
			<version>0.2.2.RELEASE</version>
		</dependency>

	</dependencies>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
<!--			<dependency>-->
<!--				<groupId>org.springframework.cloud</groupId>-->
<!--				<artifactId>spring-cloud-alibaba-dependencies</artifactId>-->
<!--				<version>0.2.2.RELEASE</version>-->
<!--				<type>pom</type>-->
<!--				<scope>import</scope>-->
<!--			</dependency>-->
        </dependencies>
    </dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.11</version>
				<configuration>
					<imageName>${docker.image.prefix}/${project.artifactId}</imageName>
					<dockerDirectory>src/main/docker</dockerDirectory>
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>

<!--			<plugin>-->
<!--				<groupId>org.codehaus.mojo</groupId>-->
<!--				<artifactId>appassembler-maven-plugin</artifactId>-->
<!--				<version>1.2.1</version>-->
<!--				<executions>-->
<!--					<execution>-->
<!--						<id>make-assembly</id>-->
<!--						<phase>package</phase>-->
<!--						<goals>-->
<!--							<goal>assemble</goal>-->
<!--						</goals>-->
<!--					</execution>-->
<!--				</executions>-->

<!--				<configuration>-->
<!--					&lt;!&ndash;lib下直接存放jar，没有路径文件夹（如com/apache)，如果没有这个选项则放在lib下的jar包会被com/apache类似的多层文件夹包裹起来&ndash;&gt;-->
<!--					<repositoryLayout>flat</repositoryLayout>-->
<!--					<configurationDirectory>conf</configurationDirectory>-->
<!--					<configurationSourceDirectory>src/main/resources</configurationSourceDirectory>-->
<!--					<copyConfigurationDirectory>true</copyConfigurationDirectory>-->
<!--					<includeConfigurationDirectoryInClasspath>true</includeConfigurationDirectoryInClasspath>-->
<!--					&lt;!&ndash;生成的项目的目录位置，这里的client是项目的名称，你可以根据你的需要自己随便命名&ndash;&gt;-->
<!--					<assembleDirectory>${project.build.directory}</assembleDirectory>-->
<!--					&lt;!&ndash;java启动参数&ndash;&gt;-->
<!--					<extraJvmArguments>-Xms128m</extraJvmArguments>-->
<!--					<binFileExtensions>-->
<!--						<unix>.sh</unix>-->
<!--					</binFileExtensions>-->
<!--					<platforms>-->
<!--						<platform>windows</platform>-->
<!--						<platform>unix</platform>-->
<!--					</platforms>-->
<!--&lt;!&ndash;					<repositoryName>lib</repositoryName>&ndash;&gt;-->
<!--					<programs>-->
<!--						<program>-->
<!--							&lt;!&ndash;指定主类，脚本名。会生成shell/bat两种类型,也可用platforms指定运行平台&ndash;&gt;-->
<!--							<mainClass>com.fungo.system.FungoGameSystemApplication</mainClass>-->
<!--							&lt;!&ndash; 生成的脚本文件的名称，比如start.sh,你也可以根据你的需要命名成其他名字 &ndash;&gt;-->
<!--							<name>start</name>-->
<!--						</program>-->
<!--					</programs>-->
<!--				</configuration>-->
<!--			</plugin>-->

		</plugins>
		<finalName>fungo-game-system-8771</finalName>
	</build>

</project>
