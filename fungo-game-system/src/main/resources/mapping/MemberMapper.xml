<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fungo.system.dao.MemberDao">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.fungo.system.entity.Member">
        <id column="id" property="id"/>
        <result column="salt" property="salt"/>
        <result column="last_visit" property="lastVisit"/>
        <result column="email" property="email"/>
        <result column="sesion_token" property="sesionToken"/>
        <result column="password" property="password"/>
        <result column="exp" property="exp"/>
        <result column="user_name" property="userName"/>
        <result column="state" property="state"/>
        <result column="has_password" property="hasPassword"/>
        <result column="level" property="level"/>
        <result column="email_verified" property="emailVerified"/>
        <result column="mobile_phone_num" property="mobilePhoneNum"/>
        <result column="avatar" property="avatar"/>
        <result column="complete" property="complete"/>
        <result column="gender" property="gender"/>
        <result column="auth_data" property="authData"/>
        <result column="import_from_parse" property="importFromParse"/>
        <result column="mobile_phone_verified" property="mobilePhoneVerified"/>
        <result column="followee_num" property="followeeNum"/>
        <result column="publish_num" property="publishNum"/>
        <result column="follower_num" property="followerNum"/>
        <result column="report_num" property="reportNum"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="sign" property="sign"/>
        <result column="member_no" property="memberNo"/>
        <result column="qq_open_id" property="qqOpenId"/>
        <result column="weixin_open_id" property="weixinOpenId"/>
        <result column="weibo_open_id" property="weiboOpenId"/>
        <result column="status" property="status" />
        <result column="sort" property="sort" />
        <result column="type" property="type" />
        <result column="isFollowed" property="isFollowed" />
        <result column="register_lingka" property="registerLingka" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
          ${alias}.id,   ${alias}.salt,   ${alias}.last_visit AS lastVisit,   ${alias}.email,   ${alias}.sesion_token AS sesionToken,   ${alias}.password, exp,   ${alias}.user_name AS userName,   ${alias}.state,
            ${alias}.has_password AS hasPassword,   ${alias}.level,   ${alias}.email_verified AS emailVerified,   ${alias}.mobile_phone_num AS mobilePhoneNum,   ${alias}.avatar,
               ${alias}.complete,   ${alias}.gender,   ${alias}.auth_data AS authData,   ${alias}.import_from_parse AS importFromParse,   ${alias}.mobile_phone_verified AS mobilePhoneVerified,
                 ${alias}.followee_num AS followeeNum,   ${alias}.publish_num AS publishNum,   ${alias}.follower_num AS followerNum,   ${alias}.report_num AS reportNum,   ${alias}.created_at AS createdAt,
                  ${alias}.updated_at AS updatedAt,   ${alias}.sign,   ${alias}.member_no AS memberNo,   ${alias}.qq_open_id AS qqOpenId,   ${alias}.weixin_open_id AS weixinOpenId,
                    ${alias}.weibo_open_id AS weiboOpenId
    </sql>

    <sql id="Base_List">
        id,  salt,  last_visit AS lastVisit,  email,  sesion_token AS sesionToken,  password, exp,  user_name AS userName,  state,
           has_password AS hasPassword,  level,  email_verified AS emailVerified,  mobile_phone_num AS mobilePhoneNum,  avatar,
              complete,  gender,  auth_data AS authData,  import_from_parse AS importFromParse,  mobile_phone_verified AS mobilePhoneVerified,
                followee_num AS followeeNum,  publish_num AS publishNum,  follower_num AS followerNum,  report_num AS reportNum,  created_at AS createdAt,
                 updated_at AS updatedAt,  sign,  member_no AS memberNo,  qq_open_id AS qqOpenId,  weixin_open_id AS weixinOpenId,
                   weibo_open_id AS weiboOpenId
    </sql>





    <!-- 我的动态 - 我的评论 -->
    <select id="getAllComments" resultType="com.game.common.bean.CommentBean" parameterType="String">
        <!--   	<![CDATA[
                  (select id,content,5 as type,1 as targetType,post_id as targetId,date_format(updated_at, '%Y-%c-%d %H:%i:%s' ) as updatedAt, '' as replyToId, '' as replyContentId from t_cmm_comment where member_id = #{userId} and state = 0)
                  UNION ALL
                  (select id,content,8 as type,2 as targetType,mood_id as targetId,date_format(updated_at, '%Y-%c-%d %H:%i:%s' ) as updatedAt, '' as replyToId, '' as replyContentId from t_moo_message where member_id = #{userId} and state = 0)
                  UNION ALL
                  (select id,content,7 as type,target_type as targetType,target_id as targetId,date_format(updated_at, '%Y-%c-%d %H:%i:%s' ) as updatedAt, replay_to_id as replyToId, reply_to_content_id as replyContentId from t_reply where member_id = #{userId} and state = 0)
                  ORDER BY updatedAt DESC
                  ]]> -->

        <![CDATA[
				(select id,content,5 as type,1 as targetType,post_id as targetId,updated_at as updatedAt, '' as replyToId, '' as replyContentId from t_cmm_comment where member_id = #{userId} and state = 0) 
				UNION ALL 
				(select id,content,8 as type,2 as targetType,mood_id as targetId,updated_at as updatedAt, '' as replyToId, '' as replyContentId from t_moo_message where member_id = #{userId} and state = 0)
				UNION ALL 
				(select id,content,7 as type,target_type as targetType,target_id as targetId,updated_at as updatedAt, replay_to_id as replyToId, reply_to_content_id as replyContentId from t_reply where member_id = #{userId} and state = 0)
				ORDER BY updatedAt DESC
			]]>
    </select>



    <!-- 查询游戏评论表中发表评论大于14条，前10名的用户 -->
    <select id="getRecommendMembersFromEvaluation" resultType="String">
	   SELECT
			member_id
		FROM
				( SELECT member_id, count( member_id ) AS ecnt FROM t_game_evaluation
                <where>
                    state = 0
                    <if test="wathMbsSet != null and wathMbsSet.size > 0">
                      AND   member_id NOT IN
                        <foreach item="item" index="index" collection="wathMbsSet" open="(" separator="," close=")">
                            #{item}
                        </foreach>
                    </if>
                </where>
				 GROUP BY member_id
                 ORDER BY ecnt desc
              ) AS evalcnt
		WHERE
            <![CDATA[ evalcnt.ecnt >= #{ecnt} ]]>
            <if test="limitSize > 0">
                LIMIT  #{limitSize}
            </if>
	</select>


    <!-- 查询文章表中发表文章大于10条，前10名的用户 -->
    <select id="getRecommendMembersFromCmmPost" resultType="String">

	   SELECT
			member_id
		FROM
				( SELECT member_id, count( member_id ) AS ccnt FROM t_cmm_post
                    <where>
                        state = 1
                        <if test="wathMbsSet != null and wathMbsSet.size > 0">
                           AND  member_id NOT IN
                            <foreach item="item" index="index" collection="wathMbsSet" open="(" separator="," close=")">
                                #{item}
                            </foreach>
                        </if>
                    </where>
                     GROUP BY member_id
                     ORDER BY ccnt DESC
               ) AS cpstcnt
		WHERE
            <![CDATA[  cpstcnt.ccnt >= #{ccnt} ]]>
            <if test="limitSize > 0">
                LIMIT  #{limitSize}
            </if>

	</select>
	

	<!-- 用户被点赞数 -->
	 <select id="getHonorQualificationOfBeLiked" resultType="java.util.HashMap">
	 	SELECT * FROM
		(SELECT member_id,0 as post_count,0 as eva_count,COUNT(*) as like_count FROM t_bas_notice WHERE type in (0,1,2,7,11) AND member_id IS NOT NULL GROUP BY member_id) 
		a WHERE a.like_count >= 50
	</select>


    <!-- 查询没有等级和fungo身份证图片的用户-->
    <select id="queryMbWithoutLevelFungoImgs" resultMap="BaseResultMap">
              SELECT
                    id,
                    LEVEL,
                    user_name,
                    created_at,
                    mobile_phone_num
                FROM
                    t_member
                WHERE
                    id NOT IN ( SELECT DISTINCT mb_id FROM t_incent_ranked WHERE rank_type = 1 OR rank_type = 3 )
    </select>

    <select id="getMemberList" resultType="java.lang.String">
        SELECT  id FROM  t_member WHERE  state = '0'
    </select>

    <select id="getEnableMemberList" resultType="com.fungo.system.entity.Member">
        SELECT
         <include refid="Base_List"></include>
         FROM  t_member where
        state = 0 and
        id in
        <foreach item="item" index="index" collection="ids" open="(" separator="," close=")">
            #{item}
        </foreach>
        order by
        field(
        id,
        <foreach collection="ids" index="index" item="item"   separator=","    >
            #{item}
        </foreach>
        )
    </select>



    <select id="getTwoMemberList" resultType="com.fungo.system.entity.Member">
        SELECT  * FROM  t_member where
        state = 0 and level >= 2
        and         id in
        <foreach item="item" index="index" collection="ids" open="(" separator="," close=")">
            #{item}
        </foreach>

        <if test="inviteeId != null and inviteeId.size() > 0  ">
            and  id not in
            <foreach item="item" index="index" collection="inviteeId" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>

    </select>

    <select id="getUnfollerMemberList" resultType="com.fungo.system.entity.Member" >
        SELECT  
        <include refid="Base_List"></include>
         FROM  t_member where
        id in
        <foreach item="item" index="index" collection="ids" open="(" separator="," close=")">
            #{item}
        </foreach>
        and id not  in
        (
        SELECT target_id FROM t_bas_action WHERE type = 5 and member_id = #{memberId} and state != -1   and target_id  in
        <foreach item="item" index="index" collection="ids" open="(" separator="," close=")">
            #{item}
        </foreach>
        )
        order by
        field(
        id,
        <foreach item="item" index="index" collection="ids"  separator=","    >
            #{item}
        </foreach>
        )
    </select>

    <select id="selectListBylargess" resultType="com.fungo.system.entity.Member">
        select
        m.id,m.mobile_phone_num   AS mobilePhoneNum
        FROM  t_member m  where    m.id not in  (
        SELECT member_id FROM t_member_coupon mc WHERE mc.member_type = 2 and mc.state = 1
        and mc.coupon_id = #{couponId}
        )
         <if test="level != null">
             and m.`level` >=  #{level}
         </if>
         limit 1000
    </select>

    <select id="getMemberIdList" resultType="java.lang.String">
        SELECT id FROM t_member WHERE mobile_phone_num in
        <foreach item="item" index="index" collection="phones" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    
</mapper>
