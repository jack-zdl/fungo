<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fungo.community.dao.mapper.CmmPostDao">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.fungo.community.entity.CmmPost">
        <id column="id" property="id"/>
        <result column="collect_num" property="collectNum"/>
        <result column="tags" property="tags"/>
        <result column="html_origin" property="htmlOrigin"/>
        <result column="content" property="content"/>
        <result column="images" property="images"/>
        <result column="cover_image" property="coverImage"/>
        <result column="comment_num" property="commentNum"/>
        <result column="state" property="state"/>
        <result column="like_num" property="likeNum"/>
        <result column="edited_at" property="editedAt"/>
        <result column="community_id" property="communityId"/>
        <result column="title" property="title"/>
        <result column="member_id" property="memberId"/>
        <result column="origin" property="origin"/>
        <result column="watch_num" property="watchNum"/>
        <result column="report_num" property="reportNum"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="post_id" property="postId"/>
        <result column="recommend" property="recommend"/>
        <result column="type" property="type"/>
        <result column="sort" property="sort"/>
        <result column="video" property="video"/>
        <result column="game_list" property="gameList"/>
        <result column="topic" property="topic"/>
        <result column="video_urls" property="videoUrls"/>
        <result column="last_reply_at" property="lastReplyAt"/>
        <result column="video_cover_image" property="videoCoverImage"/>
        <result column="boom_watch_num" property="boomWatchNum"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, collect_num AS collectNum, tags, html_origin AS htmlOrigin, content, images, cover_image AS coverImage, comment_num AS commentNum, state, like_num AS likeNum,
        edited_at as editedAt, community_id AS communityId, title, member_id AS memberId, origin, watch_num AS watchNum, report_num AS reportNum, created_at AS createdAt,
        updated_at AS updatedAt ,recommend ,type ,sort ,video , game_list as gameList , topic ,video_urls as videoUrls, last_reply_at as lastReplyAt,video_cover_image as videoCoverImage,
        boom_watch_num as boomWatchNum
    </sql>

    <sql id="Base_List">
        ${alias}.id, ${alias}.collect_num AS collectNum, ${alias}.tags, ${alias}.html_origin AS htmlOrigin, ${alias}.content, ${alias}.images, ${alias}.cover_image AS coverImage, ${alias}.comment_num AS commentNum,
        ${alias}.state, ${alias}.like_num AS likeNum,
        ${alias}.edited_at as editedAt, ${alias}.community_id AS communityId, ${alias}.title, ${alias}.member_id AS memberId, ${alias}.origin, ${alias}.watch_num AS watchNum,
        ${alias}.report_num AS reportNum, ${alias}.created_at AS createdAt,
        ${alias}.updated_at AS updatedAt ,${alias}.recommend ,${alias}.type ,${alias}.sort ,${alias}.video , ${alias}.game_list as gameList , ${alias}.topic ,${alias}.video_urls as videoUrls,
        ${alias}.last_reply_at as lastReplyAt, ${alias}.video_cover_image as videoCoverImage,
        ${alias}.boom_watch_num as boomWatchNum
    </sql>

    <!-- 获取关注用户和社区的帖子分页数据 -->
    <select id="getAllFollowerPost" resultType="com.game.common.dto.community.CmmPostBean"
            parameterType="java.util.Map">
        SELECT * FROM t_cmm_post where (
        <trim prefixOverrides="or">
            <if test="memberIdList != null">
                member_id in
                <foreach collection="memberIdList" item="item" index="index" open="(" separator="," close=")">#{item}
                </foreach>
            </if>
            <if test="communityIdList != null">
                or community_id in
                <foreach collection="communityIdList" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </trim>
        ) and state = 1

        group by id order by updated_at desc
    </select>


    <!-- 获取关注用户和社区的帖子分页数据 -->
    <select id="getAllFollowerPostWithPage" resultMap="BaseResultMap"
            parameterType="java.util.Map">
        SELECT * FROM t_cmm_post where (
        <trim prefixOverrides="or">
            <if test="memberIdList != null">
                member_id in
                <foreach collection="memberIdList" item="item" index="index" open="(" separator="," close=")">#{item}
                </foreach>
            </if>
            <if test="communityIdList != null">
                or community_id in
                <foreach collection="communityIdList" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </trim>
        ) and state = 1
        <if test="post_id != null">
            and post_id   <![CDATA[  < ]]> #{post_id}
        </if>
        <if test="updated_at != null">
            and updated_at   <![CDATA[  <= ]]> #{updated_at}
        </if>
        group by id order by updated_at desc LIMIT #{pageSize}
    </select>


    <!-- 获取关注用户和社区的帖子总数 -->
    <select id="getAllFollowerPostCount" resultType="java.util.Map" parameterType="java.util.Map">
        SELECT count(id) as ct FROM t_cmm_post where (
        <trim prefixOverrides="or">
            <if test="memberIdList != null">
                member_id in
                <foreach collection="memberIdList" item="item" index="index" open="(" separator="," close=")">#{item}
                </foreach>
            </if>
            <if test="communityIdList != null">
                or community_id in
                <foreach collection="communityIdList" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </trim>
        ) and state = 1
    </select>


    <!-- 获取帖子最后回复时间 -->
    <select id="getLastReplyTime" resultType="java.util.HashMap" parameterType="String">
  	(SELECT id,created_at FROM t_cmm_comment WHERE post_id = #{postId} and state = 0 )
	UNION
	(SELECT id,created_at FROM t_reply WHERE target_id in 
		(SELECT id FROM t_cmm_comment WHERE post_id = #{postId} and state = 0) 
	and state = 0) 
	ORDER BY created_at DESC Limit 1
    
    
    </select>


    <!-- 用户精品帖子数 -->
    <select id="getHonorQualificationOfEssencePost" resultType="java.util.HashMap">
	 	SELECT * FROM
		(SELECT member_id,COUNT(*) as post_count,0 as eva_count,0 as like_count FROM t_cmm_post WHERE type = 2 GROUP BY member_id)
		a WHERE a.post_count >= 2
	</select>


    <!-- 查询文章表中发表文章大于10条，前10名的用户 -->
    <select id="getRecommendMembersFromCmmPost" resultType="String">

        SELECT
        member_id
        FROM
        ( SELECT member_id, count( member_id ) AS ccnt FROM t_cmm_post
        <where>
            state = 1
            <if test="wathMbsSet != null and wathMbsSet.size > 0">
                AND member_id NOT IN
                <foreach item="item" index="index" collection="wathMbsSet" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
        GROUP BY member_id
        ORDER BY ccnt DESC
        ) AS cpstcnt
        WHERE
        <![CDATA[  cpstcnt.ccnt >= #{ccnt} ]]>
        <if test="limitSize > 0">
            LIMIT #{limitSize}
        </if>

    </select>


    <!-- 获取我的收藏（文章） -->
    <select id="getCollection" resultType="com.game.common.bean.CollectionBean">

        select
        p.id,
        p.title,
        p.content,
        p.cover_image as coverImage,
        p.video as video,
        p.member_id as memberId,
        p.updated_at as updatedAt,
        p.created_at as createdAt
        from t_cmm_post p

        <where>
            <if test="postIds != null and postIds.size > 0">
                p.id IN
                <foreach item="item" index="index" collection="postIds" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>

        order by updatedAt desc

    </select>

    <!--getPostBoomWatchNumByCardId  PC2.0新增浏览量 根据跟用户ID获取文章的浏览量-->
    <select id="getPostBoomWatchNumByCardId" resultType="java.lang.Integer">
    SELECT
        SUM(
            greatest(
                IFNULL(watch_num, 0),
                IFNULL(boom_watch_num, 0)
            )
        )
    FROM
        t_cmm_post
    WHERE
        member_id = #{cardId}
    </select>

    <!-- AND cpc.default_link = 1  -->
    <select id="getCmmCircleListByPostId" parameterType="java.lang.String" resultType="com.fungo.community.entity.CmmPost">
    select  *  from  t_cmm_post where state != -1 and id in
    ( select cpc.post_id
    from t_cmm_post_circle cpc where cpc.circle_id = #{circleId} )

  </select>


    <select id="getCmmCircleListByCircleId" resultType="com.fungo.community.entity.CmmPost">
        select  
         <include refid="Base_Column_List"></include>
         ,sum(cp.comment_num+cp.like_num+cp.collect_num+cp.watch_num) as total  from  t_cmm_post cp where  cp.state != -1 and id in
        ( select cpc.post_id
        from t_cmm_post_circle cpc where cpc.circle_id = #{circleId}   )

        <if test="tagId != null and tagId != ''">
            and cp.tags = #{tagId}
        </if>
        <choose>
            <when test="cream != null and cream != ''">
                and cp.type = #{cream}
            </when>
            <otherwise>
                and cp.type != '3'
            </otherwise>
        </choose>

        <if test='sortType == "1" ' >
            GROUP BY cp.id   order  by  field(cp.type,'3')   desc  , CASE    WHEN cp.type = 3 then cp.edited_at END DESC,

              cp.created_at desc
        </if>
        <if test='sortType == "2"'>
            GROUP BY cp.id   order  by cp.last_reply_at desc  ,   cp.created_at desc
        </if>
        <if test='sortType == "3"'>
            and cp.type = 2 GROUP BY cp.id     order  by cp.created_at desc
        </if>
        <if test='sortType == "4"'>
            GROUP BY cp.id ORDER BY total desc ,  cp.created_at desc
        </if>
    </select>


    <select id="getAllCmmCircleListByCircleId" resultType="com.fungo.community.entity.CmmPost">
        select
        <include refid="Base_Column_List"></include>
        ,sum(cp.comment_num+cp.like_num+cp.collect_num+cp.watch_num) as total  from  t_cmm_post cp where  cp.state != -1 and id in
        ( select cpc.post_id
        from t_cmm_post_circle cpc where cpc.circle_id = #{circleId}   )

        <choose>
            <when test="cream != null and cream != ''">
                and cp.type = #{cream}
            </when>
            <otherwise>
                and cp.type != '3'
            </otherwise>
        </choose>

        <if test='sortType == "1" ' >
            GROUP BY cp.id   order  by  field(cp.type,'3')   desc  , CASE    WHEN cp.type = 3 then cp.edited_at END DESC,

            cp.created_at desc
        </if>
        <if test='sortType == "2"'>
            GROUP BY cp.id  order  by  field(cp.type,'3')   desc  , CASE    WHEN cp.type = 3 then cp.edited_at END DESC,    cp.last_reply_at desc
        </if>
        <if test='sortType == "3"'>
            and cp.type = 2 GROUP BY cp.id      order  by cp.created_at desc
        </if>
        <if test='sortType == "4"'>
            GROUP BY cp.id order  by  field(cp.type,'3')   desc  , CASE    WHEN cp.type = 3 then cp.edited_at END DESC,  total desc , cp.created_at desc
        </if>
    </select>


    <select id="queryCmmPostRefGameIds" parameterType="map" resultType="java.util.HashMap">
        SELECT
            DISTINCT
            mpost.id AS id,
            postGame.post_id AS post_id,
            postGame.game_id AS game_id,
            SUM( watch_num + comment_num + like_num + collect_num ) AS wclc
        FROM

        t_cmm_post mpost

        JOIN t_cmm_post_game postGame ON mpost.id = postGame.post_id

        AND state != -1

        <if test="keyword != null and keyword !=''">
            AND ( title LIKE  concat(concat('%',#{keyword}),'%')
                 OR content LIKE concat(concat('%',#{keyword}),'%')
            )
        </if>
        GROUP BY
             mpost.id
        ORDER BY
        <if test="keyword != null and keyword !=''">
            LOCATE( #{keyword}, title ) DESC,
        </if>
        wclc DESC,
        <if test="keyword != null and keyword !=''">
            LOCATE( #{keyword}, content ) DESC,
        </if>
        wclc DESC
        LIMIT #{startOffset} ,#{pageSize}
    </select>




    <select id="queryCmmPostRefGameIdsCount" parameterType="map" resultType="java.util.HashMap">
        SELECT
            count(DISTINCT mpost.id) as ct
        FROM
        t_cmm_post mpost
        JOIN t_cmm_post_game postGame ON mpost.id = postGame.post_id
        AND state != -1

        <if test="keyword != null and keyword !=''">
            AND ( title LIKE concat(concat('%',#{keyword}),'%')
            OR content LIKE concat(concat('%',#{keyword}),'%')
            )
        </if>
    </select>

    <select id="getCmmPostByGameId" resultType="com.fungo.community.entity.CmmPost">

	SELECT
	 <include refid="Base_Column_List"></include>
	 FROM t_cmm_post cp  WHERE cp.state != -1 AND
	 (
	    cp.community_id in  (SELECT cc.id  FROM t_cmm_community cc WHERE cc.game_id = #{gameId} )
	    or cp.id in (SELECT cpg.post_id FROM t_cmm_post_game cpg WHERE cpg.game_id = #{gameId}  )
	 )order  by cp.created_at desc
    </select>

    <select id="getCmmPostByRecommend" resultType="com.fungo.community.entity.CmmPost">
        SELECT
        <include refid="Base_List"><property name="alias" value="cp"/></include>
        FROM t_cmm_post  cp WHERE cp.state != -1  and  cp.recommend = 1 and
        cp.id  NOT in
        ( SELECT cpc.post_id  FROM t_cmm_post_circle cpc , t_cmm_circle cc WHERE  cpc.circle_id = cc.id  and cpc.post_id = cp.id  and cc.state != 1 )  ORDER BY cp.sort DESC , cp.edited_at desc
    </select>



    <update id="updateCmmPostCommentNum" >
        update t_cmm_post set  comment_num = comment_num - 1  WHERE id = (SELECT post_id FROM t_cmm_comment WHERE id = #{commentId})
    </update>

</mapper>
