<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fungo.community.dao.mapper.CmmPostCircleMapper">
  <resultMap id="BaseResultMap" type="com.fungo.community.entity.CmmPostCircle">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="post_id" jdbcType="VARCHAR" property="postId" />
    <result column="circle_id" jdbcType="VARCHAR" property="circleId" />
    <result column="default_link" jdbcType="INTEGER" property="defaultLink" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
  </resultMap>
  <sql id="Base_Column_List">
    id, post_id AS postId, circle_id AS circleId , default_link AS defaultLink, created_at AS createdAt, updated_at AS updatedAt
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_cmm_post_circle
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from t_cmm_post_circle
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.fungo.community.entity.CmmPostCircle">
    insert into t_cmm_post_circle (id, post_id, circle_id, 
      default_link, created_at, updated_at
      )
    values (#{id,jdbcType=VARCHAR}, #{postId,jdbcType=VARCHAR}, #{circleId,jdbcType=VARCHAR}, 
      #{defaultLink,jdbcType=INTEGER}, #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.fungo.community.entity.CmmPostCircle">
    insert into t_cmm_post_circle
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="postId != null">
        post_id,
      </if>
      <if test="circleId != null">
        circle_id,
      </if>
      <if test="defaultLink != null">
        default_link,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="postId != null">
        #{postId,jdbcType=VARCHAR},
      </if>
      <if test="circleId != null">
        #{circleId,jdbcType=VARCHAR},
      </if>
      <if test="defaultLink != null">
        #{defaultLink,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.fungo.community.entity.CmmPostCircle">
    update t_cmm_post_circle
    <set>
      <if test="postId != null">
        post_id = #{postId,jdbcType=VARCHAR},
      </if>
      <if test="circleId != null">
        circle_id = #{circleId,jdbcType=VARCHAR},
      </if>
      <if test="defaultLink != null">
        default_link = #{defaultLink,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fungo.community.entity.CmmPostCircle">
    update t_cmm_post_circle
    set post_id = #{postId,jdbcType=VARCHAR},
      circle_id = #{circleId,jdbcType=VARCHAR},
      default_link = #{defaultLink,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>

  <select id="getCmmCircleByPostId" parameterType="java.lang.String" resultType="java.lang.String">
    select circle_id from t_cmm_post_circle where post_id = #{postId} and default_link =  1  order by created_at desc limit 1
  </select>

  <select id="getCmmPostCircleByCircleId" parameterType="java.lang.String" resultType="com.game.common.dto.circle.CircleMemberPulishDto">
    SELECT sum(f.c) as postNum,sum(f.d) as commentNum,sum(f.f) as evaNum, f.member_id as memberId , sum(f.comment_num) as post_comment_num ,   sum(f.like_num) as post_like_num
 FROM (
		( SELECT COUNT(*) as c , 0   as   d  , 0 as f, cp.member_id , cp.comment_num  , cp.like_num  FROM t_cmm_post cp WHERE
			cp.id in ( SELECT cm1.post_id FROM t_cmm_post_circle cm1 WHERE cm1.circle_id = #{circleId} ) and cp.state = 1 GROUP BY cp.member_id  )
	  UNION ALL
	  ( SELECT 0      as   c , COUNT(*) as d,0 as f, cc.member_id , 0  as  comment_num, 0  as like_num   FROM t_cmm_comment cc WHERE
			cc.post_id in (  SELECT cm2.post_id FROM t_cmm_post_circle cm2 WHERE cm2.circle_id = #{circleId} ) and cc.state = 0 GROUP BY cc.member_id )

	  )
		f GROUP BY f.member_id ORDER BY SUM(f.c+f.d+f.f+f.comment_num+f.like_num) DESC,f.member_id DESC
  </select>


  <select id="getCmmPostCircleOfGameByCircleId" parameterType="java.lang.String" resultType="com.game.common.dto.circle.CircleMemberPulishDto">
    SELECT sum(f.c) as postNum,sum(f.d) as commentNum,sum(f.f) as evaNum, f.member_id as memberId , sum(f.comment_num) as post_comment_num ,   sum(f.like_num) as post_like_num
 FROM (
		( SELECT COUNT(*) as c , 0   as   d  , 0 as f, cp.member_id , cp.comment_num  , cp.like_num  FROM t_cmm_post cp WHERE
			cp.id in ( SELECT cm1.post_id FROM t_cmm_post_circle cm1 WHERE cm1.circle_id = #{circleId} ) and cp.state = 1 GROUP BY cp.member_id  )
	  UNION ALL
	  ( SELECT 0      as   c , COUNT(*) as d,0 as f, cc.member_id , 0  as  comment_num, 0  as like_num   FROM t_cmm_comment cc WHERE
			cc.post_id in (  SELECT cm2.post_id FROM t_cmm_post_circle cm2 WHERE cm2.circle_id = #{circleId} ) and cc.state = 0 GROUP BY cc.member_id )

	  )
		f GROUP BY f.member_id ORDER BY SUM(f.c+f.d+f.f+f.comment_num+f.like_num) DESC,f.member_id DESC
  </select>

</mapper>